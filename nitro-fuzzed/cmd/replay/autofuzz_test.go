package chaininfofuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./replay/".

import (
	"context"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
)

func Fuzz_PreimageDASReader_ExpirationPolicy(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dasReader *main.PreimageDASReader
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&dasReader, &ctx)
		if dasReader == nil {
			return
		}

		dasReader.ExpirationPolicy(ctx)
	})
}

func Fuzz_PreimageDASReader_GetByHash(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dasReader *main.PreimageDASReader
		var ctx context.Context
		var hash common.Hash
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&dasReader, &ctx, &hash)
		if dasReader == nil {
			return
		}

		dasReader.GetByHash(ctx, hash)
	})
}

func Fuzz_PreimageDASReader_HealthCheck(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dasReader *main.PreimageDASReader
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&dasReader, &ctx)
		if dasReader == nil {
			return
		}

		dasReader.HealthCheck(ctx)
	})
}

func Fuzz_ErrorIterator_Error(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.ErrorIterator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.Error()
	})
}

func Fuzz_ErrorIterator_Key(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.ErrorIterator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.Key()
	})
}

func Fuzz_ErrorIterator_Next(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.ErrorIterator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.Next()
	})
}

func Fuzz_ErrorIterator_Release(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.ErrorIterator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.Release()
	})
}

func Fuzz_ErrorIterator_Value(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.ErrorIterator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.Value()
	})
}

// skipping Fuzz_NopBatcher_Replay because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/ethdb.KeyValueWriter

func Fuzz_NopBatcher_Reset(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b main.NopBatcher
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)

		b.Reset()
	})
}

func Fuzz_NopBatcher_ValueSize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b main.NopBatcher
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)

		b.ValueSize()
	})
}

func Fuzz_NopBatcher_Write(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b main.NopBatcher
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)

		b.Write()
	})
}

func Fuzz_PreimageDb_Close(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db)

		db.Close()
	})
}

func Fuzz_PreimageDb_Compact(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var start []byte
		var limit []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &start, &limit)

		db.Compact(start, limit)
	})
}

func Fuzz_PreimageDb_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var key []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &key)

		db.Delete(key)
	})
}

func Fuzz_PreimageDb_Get(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var key []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &key)

		db.Get(key)
	})
}

func Fuzz_PreimageDb_Has(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var key []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &key)

		db.Has(key)
	})
}

func Fuzz_PreimageDb_NewBatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db)

		db.NewBatch()
	})
}

func Fuzz_PreimageDb_NewBatchWithSize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var size int
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &size)

		db.NewBatchWithSize(size)
	})
}

func Fuzz_PreimageDb_NewIterator(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var prefix []byte
		var start []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &prefix, &start)

		db.NewIterator(prefix, start)
	})
}

func Fuzz_PreimageDb_NewSnapshot(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db)

		db.NewSnapshot()
	})
}

func Fuzz_PreimageDb_Put(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var key []byte
		var value []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &key, &value)

		db.Put(key, value)
	})
}

func Fuzz_PreimageDb_Release(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db)

		db.Release()
	})
}

func Fuzz_PreimageDb_Stat(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var db main.PreimageDb
		var property string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&db, &property)

		db.Stat(property)
	})
}

func Fuzz_WavmChainContext_Engine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c main.WavmChainContext
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)

		c.Engine()
	})
}

func Fuzz_WavmChainContext_GetHeader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c main.WavmChainContext
		var hash common.Hash
		var num uint64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hash, &num)

		c.GetHeader(hash, num)
	})
}

func Fuzz_WavmInbox_AdvanceSequencerInbox(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.WavmInbox
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.AdvanceSequencerInbox()
	})
}

func Fuzz_WavmInbox_GetPositionWithinMessage(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.WavmInbox
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.GetPositionWithinMessage()
	})
}

func Fuzz_WavmInbox_GetSequencerInboxPosition(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.WavmInbox
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.GetSequencerInboxPosition()
	})
}

func Fuzz_WavmInbox_PeekSequencerInbox(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.WavmInbox
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i)

		i.PeekSequencerInbox()
	})
}

func Fuzz_WavmInbox_ReadDelayedInbox(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.WavmInbox
		var seqNum uint64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i, &seqNum)

		i.ReadDelayedInbox(seqNum)
	})
}

func Fuzz_WavmInbox_SetPositionWithinMessage(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var i main.WavmInbox
		var pos uint64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&i, &pos)

		i.SetPositionWithinMessage(pos)
	})
}
