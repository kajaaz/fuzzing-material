package chaininfofuzz


// Edit if desired. Code generated by "go-fuzz-fill-utils ./genericconf/".

import (
	"testing"
	"github.com/offchainlabs/nitro/cmd/genericconf"
	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
)

func Fuzz_IPCConfig_Apply(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *genericconf.IPCConfig
		var stackConf *node.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &stackConf)
	if c == nil|| stackConf == nil {
		return
	}

	c.Apply(stackConf)
	})
}

func Fuzz_LiveConfig[T ConfigConstrain[T]]_Get(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *genericconf.LiveConfig[T]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
	if c == nil {
		return
	}

	c.Get()
	})
}

// skipping Fuzz_LiveConfig[T ConfigConstrain[T]]_Set because parameters include func, chan, or unsupported interface: T

// skipping Fuzz_LiveConfig[T ConfigConstrain[T]]_SetOnReloadHook because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/cmd/genericconf.OnReloadHook[T]

func Fuzz_LiveConfig[T ConfigConstrain[T]]_Start(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *genericconf.LiveConfig[T]
		var ctxIn context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctxIn)
	if c == nil {
		return
	}

	c.Start(ctxIn)
	})
}

func Fuzz_RpcConfig_Apply(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *genericconf.RpcConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
	if c == nil {
		return
	}

	c.Apply()
	})
}

func Fuzz_WalletConfig_Pwd(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *genericconf.WalletConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&w)
	if w == nil {
		return
	}

	w.Pwd()
	})
}

func Fuzz_WalletConfig_ResolveDirectoryNames(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *genericconf.WalletConfig
		var chain string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&w, &chain)
	if w == nil {
		return
	}

	w.ResolveDirectoryNames(chain)
	})
}

func Fuzz_AuthRPCConfig_Apply(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a genericconf.AuthRPCConfig
		var stackConf *node.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&a, &stackConf)
	if stackConf == nil {
		return
	}

	a.Apply(stackConf)
	})
}

func Fuzz_GraphQLConfig_Apply(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c genericconf.GraphQLConfig
		var stackConf *node.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &stackConf)
	if stackConf == nil {
		return
	}

	c.Apply(stackConf)
	})
}

func Fuzz_HTTPConfig_Apply(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c genericconf.HTTPConfig
		var stackConf *node.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &stackConf)
	if stackConf == nil {
		return
	}

	c.Apply(stackConf)
	})
}

func Fuzz_WSConfig_Apply(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c genericconf.WSConfig
		var stackConf *node.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &stackConf)
	if stackConf == nil {
		return
	}

	c.Apply(stackConf)
	})
}

func Fuzz_AuthRPCConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.AuthRPCConfigAddOptions(prefix, f2)
	})
}

func Fuzz_ConfConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.ConfConfigAddOptions(prefix, f2)
	})
}

func Fuzz_FileLoggingConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.FileLoggingConfigAddOptions(prefix, f2)
	})
}

func Fuzz_GetVersion(f *testing.F) {
	f.Fuzz(func(t *testing.T, definedVersion string, definedTime string, definedModified string) {
	genericconf.GetVersion(definedVersion, definedTime, definedModified)
	})
}

func Fuzz_GraphQLConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.GraphQLConfigAddOptions(prefix, f2)
	})
}

func Fuzz_HTTPConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.HTTPConfigAddOptions(prefix, f2)
	})
}

func Fuzz_HTTPServerTimeoutConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.HTTPServerTimeoutConfigAddOptions(prefix, f2)
	})
}

func Fuzz_IPCConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.IPCConfigAddOptions(prefix, f2)
	})
}

// skipping Fuzz_InitLog because parameters include func, chan, or unsupported interface: func(string) string

func Fuzz_MetricsServerAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.MetricsServerAddOptions(prefix, f2)
	})
}

// skipping Fuzz_NewLiveConfig because parameters include func, chan, or unsupported interface: T

// skipping Fuzz_NoopOnReloadHook because parameters include func, chan, or unsupported interface: T

func Fuzz_PProfAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.PProfAddOptions(prefix, f2)
	})
}

func Fuzz_ParseLogType(f *testing.F) {
	f.Fuzz(func(t *testing.T, logType string) {
	genericconf.ParseLogType(logType)
	})
}

func Fuzz_RpcConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.RpcConfigAddOptions(prefix, f2)
	})
}

func Fuzz_S3ConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.S3ConfigAddOptions(prefix, f2)
	})
}

func Fuzz_StartPprof(f *testing.F) {
	f.Fuzz(func(t *testing.T, address string) {
	genericconf.StartPprof(address)
	})
}

func Fuzz_TryCreatingJWTSecret(f *testing.F) {
	f.Fuzz(func(t *testing.T, filename string) {
	genericconf.TryCreatingJWTSecret(filename)
	})
}

func Fuzz_WSConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
	if f2 == nil {
		return
	}

	genericconf.WSConfigAddOptions(prefix, f2)
	})
}

func Fuzz_WalletConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		var defaultPathname string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2, &defaultPathname)
	if f2 == nil {
		return
	}

	genericconf.WalletConfigAddOptions(prefix, f2, defaultPathname)
	})
}

