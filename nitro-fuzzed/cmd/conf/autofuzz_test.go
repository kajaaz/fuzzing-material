package chaininfofuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./conf".

import (
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/cmd/conf"
	"github.com/spf13/pflag"
)

func Fuzz_L1Config_ResolveDirectoryNames(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *conf.L1Config
		var chain string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &chain)
		if c == nil {
			return
		}

		c.ResolveDirectoryNames(chain)
	})
}

func Fuzz_L1Config_Validate(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *conf.L1Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Validate()
	})
}

func Fuzz_L2Config_ResolveDirectoryNames(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *conf.L2Config
		var chain string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &chain)
		if c == nil {
			return
		}

		c.ResolveDirectoryNames(chain)
	})
}

func Fuzz_PersistentConfig_ResolveDirectoryNames(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *conf.PersistentConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.ResolveDirectoryNames()
	})
}

func Fuzz_DatabaseInDirectory(f *testing.F) {
	f.Fuzz(func(t *testing.T, path string) {
		conf.DatabaseInDirectory(path)
	})
}

func Fuzz_L1ConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		conf.L1ConfigAddOptions(prefix, f2)
	})
}

func Fuzz_L2ConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		conf.L2ConfigAddOptions(prefix, f2)
	})
}

func Fuzz_PersistentConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		conf.PersistentConfigAddOptions(prefix, f2)
	})
}
