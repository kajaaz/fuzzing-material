package chaininfofuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./nitro-val/".

import (
	"context"
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/spf13/pflag"
)

func Fuzz_ValidationNodeConfig_CanReload(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		var new *main.ValidationNodeConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args, &new)
		if new == nil {
			return
		}

		c, err := main.ParseNode(ctx, args)
		if err != nil {
			return
		}
		c.CanReload(new)
	})
}

func Fuzz_ValidationNodeConfig_GetReloadInterval(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args)

		c, err := main.ParseNode(ctx, args)
		if err != nil {
			return
		}
		c.GetReloadInterval()
	})
}

func Fuzz_ValidationNodeConfig_ResolveDirectoryNames(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args)

		c, err := main.ParseNode(ctx, args)
		if err != nil {
			return
		}
		c.ResolveDirectoryNames()
	})
}

func Fuzz_ValidationNodeConfig_ShallowClone(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args)

		c, err := main.ParseNode(ctx, args)
		if err != nil {
			return
		}
		c.ShallowClone()
	})
}

func Fuzz_ValidationNodeConfig_Validate(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args)

		c, err := main.ParseNode(ctx, args)
		if err != nil {
			return
		}
		c.Validate()
	})
}

func Fuzz_ParseNode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args)

		main.ParseNode(ctx, args)
	})
}

func Fuzz_ValidationNodeConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var f1 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&f1)
		if f1 == nil {
			return
		}

		main.ValidationNodeConfigAddOptions(f1)
	})
}
