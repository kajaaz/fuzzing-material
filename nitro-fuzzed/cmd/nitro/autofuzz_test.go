package chaininfofuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./nitro".

import (
	"context"
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/spf13/pflag"
)

func Fuzz_NodeConfig_CanReload(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *main.NodeConfig
		var new *main.NodeConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &new)
		if c == nil || new == nil {
			return
		}

		c.CanReload(new)
	})
}

func Fuzz_NodeConfig_GetReloadInterval(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *main.NodeConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.GetReloadInterval()
	})
}

func Fuzz_NodeConfig_ResolveDirectoryNames(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *main.NodeConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.ResolveDirectoryNames()
	})
}

func Fuzz_NodeConfig_ShallowClone(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *main.NodeConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.ShallowClone()
	})
}

func Fuzz_NodeConfig_Validate(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *main.NodeConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Validate()
	})
}

func Fuzz_NodeConfigFetcher_Get(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var f1 *main.NodeConfigFetcher
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&f1)
		if f1 == nil {
			return
		}

		f1.Get()
	})
}

func Fuzz_InitConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		main.InitConfigAddOptions(prefix, f2)
	})
}

func Fuzz_NodeConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var f1 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&f1)
		if f1 == nil {
			return
		}

		main.NodeConfigAddOptions(f1)
	})
}

func Fuzz_ParseNode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var args []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &args)

		main.ParseNode(ctx, args)
	})
}
