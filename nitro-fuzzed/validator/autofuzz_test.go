package arbcompressfuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./validator/".

import (
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/solgen/go/challengegen"
	"github.com/offchainlabs/nitro/solgen/go/rollupgen"
	"github.com/offchainlabs/nitro/validator"
)

func Fuzz_ExecutionState_AsSolidityStruct(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var eth rollupgen.ExecutionState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&eth)

		s := validator.NewExecutionStateFromSolidity(eth)
		s.AsSolidityStruct()
	})
}

func Fuzz_ExecutionState_BlockStateHash(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var eth rollupgen.ExecutionState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&eth)

		s := validator.NewExecutionStateFromSolidity(eth)
		s.BlockStateHash()
	})
}

func Fuzz_ExecutionState_RequiredBatches(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var eth rollupgen.ExecutionState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&eth)

		s := validator.NewExecutionStateFromSolidity(eth)
		s.RequiredBatches()
	})
}

func Fuzz_GoGlobalState_AsSolidityStruct(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var gs challengegen.GlobalState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&gs)

		s := validator.GoGlobalStateFromSolidity(gs)
		s.AsSolidityStruct()
	})
}

func Fuzz_GoGlobalState_Hash(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var gs challengegen.GlobalState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&gs)

		s := validator.GoGlobalStateFromSolidity(gs)
		s.Hash()
	})
}

func Fuzz_GoGlobalStateFromSolidity(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var gs challengegen.GlobalState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&gs)

		validator.GoGlobalStateFromSolidity(gs)
	})
}

func Fuzz_NewExecutionStateFromSolidity(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var eth rollupgen.ExecutionState
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&eth)

		validator.NewExecutionStateFromSolidity(eth)
	})
}
