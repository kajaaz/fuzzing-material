package util

// Edit if desired. Code generated by "go-fuzz-fill-utils ./contracts/".

import (
	"context"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/solgen/go/bridgegen"
	"github.com/offchainlabs/nitro/util/contracts"
)

func Fuzz_BatchPosterVerifier_FlushCache(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var seqInboxCaller *bridgegen.SequencerInboxCaller
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&seqInboxCaller, &ctx)
		if seqInboxCaller == nil {
			return
		}

		bpv := contracts.NewBatchPosterVerifier(seqInboxCaller)
		bpv.FlushCache(ctx)
	})
}

func Fuzz_BatchPosterVerifier_IsBatchPoster(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var seqInboxCaller *bridgegen.SequencerInboxCaller
		var ctx context.Context
		var addr common.Address
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&seqInboxCaller, &ctx, &addr)
		if seqInboxCaller == nil {
			return
		}

		bpv := contracts.NewBatchPosterVerifier(seqInboxCaller)
		bpv.IsBatchPoster(ctx, addr)
	})
}

func Fuzz_MockBatchPosterVerifier_IsBatchPoster(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var validAddr common.Address
		var _x2 context.Context
		var addr common.Address
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&validAddr, &_x2, &addr)

		bpv := contracts.NewMockBatchPosterVerifier(validAddr)
		bpv.IsBatchPoster(_x2, addr)
	})
}

func Fuzz_NewBatchPosterVerifier(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var seqInboxCaller *bridgegen.SequencerInboxCaller
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&seqInboxCaller)
		if seqInboxCaller == nil {
			return
		}

		contracts.NewBatchPosterVerifier(seqInboxCaller)
	})
}

func Fuzz_NewMockBatchPosterVerifier(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var validAddr common.Address
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&validAddr)

		contracts.NewMockBatchPosterVerifier(validAddr)
	})
}
