package util

// Edit if desired. Code generated by "go-fuzz-fill-utils ./stopwaiter/".

import (
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/util/stopwaiter"
)

// skipping Fuzz_StopWaiter_CallIteratively because parameters include func, chan, or unsupported interface: func(context.Context) time.Duration

func Fuzz_StopWaiter_GetContext(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiter
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.GetContext()
	})
}

func Fuzz_StopWaiter_GetParentContext(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiter
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.GetParentContext()
	})
}

// skipping Fuzz_StopWaiter_LaunchThread because parameters include func, chan, or unsupported interface: func(context.Context)

// skipping Fuzz_StopWaiter_Start because parameters include func, chan, or unsupported interface: any

func Fuzz_StopWaiter_StopAndWait(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiter
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.StopAndWait()
	})
}

// skipping Fuzz_StopWaiterSafe_CallIterativelySafe because parameters include func, chan, or unsupported interface: func(context.Context) time.Duration

func Fuzz_StopWaiterSafe_GetContextSafe(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.GetContextSafe()
	})
}

func Fuzz_StopWaiterSafe_GetParentContextSafe(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.GetParentContextSafe()
	})
}

func Fuzz_StopWaiterSafe_GetWaitChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.GetWaitChannel()
	})
}

// skipping Fuzz_StopWaiterSafe_LaunchThreadSafe because parameters include func, chan, or unsupported interface: func(context.Context)

// skipping Fuzz_StopWaiterSafe_LaunchUntrackedThread because parameters include func, chan, or unsupported interface: func()

// skipping Fuzz_StopWaiterSafe_Start because parameters include func, chan, or unsupported interface: any

func Fuzz_StopWaiterSafe_Started(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.Started()
	})
}

func Fuzz_StopWaiterSafe_StopAndWait(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.StopAndWait()
	})
}

func Fuzz_StopWaiterSafe_StopOnly(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.StopOnly()
	})
}

func Fuzz_StopWaiterSafe_Stopped(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *stopwaiter.StopWaiterSafe
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.Stopped()
	})
}

// skipping Fuzz_CallIterativelyWith because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/util/stopwaiter.ThreadLauncher

// skipping Fuzz_ChanRateLimiter because parameters include func, chan, or unsupported interface: <-chan T

// skipping Fuzz_LaunchPromiseThread because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/util/stopwaiter.ThreadLauncher
