package util


// Edit if desired. Code generated by "go-fuzz-fill-utils ./containers/".

import (
	"testing"
	"github.com/offchainlabs/nitro/util/containers"
	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
)

// skipping Fuzz_LruCache[K comparable, V any]_Add because parameters include func, chan, or unsupported interface: K

func Fuzz_LruCache[K comparable, V any]_Clear(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int) {
	c := containers.NewLruCache(size)
	c.Clear()
	})
}

// skipping Fuzz_LruCache[K comparable, V any]_Contains because parameters include func, chan, or unsupported interface: K

// skipping Fuzz_LruCache[K comparable, V any]_Get because parameters include func, chan, or unsupported interface: K

func Fuzz_LruCache[K comparable, V any]_GetOldest(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int) {
	c := containers.NewLruCache(size)
	c.GetOldest()
	})
}

func Fuzz_LruCache[K comparable, V any]_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int) {
	c := containers.NewLruCache(size)
	c.Len()
	})
}

// skipping Fuzz_LruCache[K comparable, V any]_Remove because parameters include func, chan, or unsupported interface: K

func Fuzz_LruCache[K comparable, V any]_RemoveOldest(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int) {
	c := containers.NewLruCache(size)
	c.RemoveOldest()
	})
}

func Fuzz_LruCache[K comparable, V any]_Resize(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int, newSize int) {
	c := containers.NewLruCache(size)
	c.Resize(newSize)
	})
}

func Fuzz_LruCache[K comparable, V any]_Size(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int) {
	c := containers.NewLruCache(size)
	c.Size()
	})
}

func Fuzz_Promise[R any]_Await(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p *containers.Promise[R]
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&p, &ctx)
	if p == nil {
		return
	}

	p.Await(ctx)
	})
}

func Fuzz_Promise[R any]_Cancel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p *containers.Promise[R]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&p)
	if p == nil {
		return
	}

	p.Cancel()
	})
}

func Fuzz_Promise[R any]_Current(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p *containers.Promise[R]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&p)
	if p == nil {
		return
	}

	p.Current()
	})
}

// skipping Fuzz_Promise[R any]_Produce because parameters include func, chan, or unsupported interface: R

// skipping Fuzz_Promise[R any]_ProduceError because parameters include func, chan, or unsupported interface: error

// skipping Fuzz_Promise[R any]_ProduceErrorSafe because parameters include func, chan, or unsupported interface: error

// skipping Fuzz_Promise[R any]_ProduceSafe because parameters include func, chan, or unsupported interface: R

func Fuzz_Promise[R any]_Ready(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p *containers.Promise[R]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&p)
	if p == nil {
		return
	}

	p.Ready()
	})
}

func Fuzz_Promise[R any]_ReadyChan(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p *containers.Promise[R]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&p)
	if p == nil {
		return
	}

	p.ReadyChan()
	})
}

func Fuzz_Queue[T any]_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var q *containers.Queue[T]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&q)
	if q == nil {
		return
	}

	q.Len()
	})
}

func Fuzz_Queue[T any]_Pop(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var q *containers.Queue[T]
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&q)
	if q == nil {
		return
	}

	q.Pop()
	})
}

// skipping Fuzz_Queue[T any]_Push because parameters include func, chan, or unsupported interface: T

// skipping Fuzz_SyncMap[K, V any]_Delete because parameters include func, chan, or unsupported interface: K

// skipping Fuzz_SyncMap[K, V any]_Load because parameters include func, chan, or unsupported interface: K

// skipping Fuzz_SyncMap[K, V any]_Store because parameters include func, chan, or unsupported interface: K

// skipping Fuzz_NewLruCacheWithOnEvict because parameters include func, chan, or unsupported interface: func(K, V)

func Fuzz_NewLruCache(f *testing.F) {
	f.Fuzz(func(t *testing.T, size int) {
	containers.NewLruCache(size)
	})
}

// skipping Fuzz_NewPromise because parameters include func, chan, or unsupported interface: func()

// skipping Fuzz_NewReadyPromise because parameters include func, chan, or unsupported interface: R

