package arbcompressfuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./broadcaster/".

import (
	"context"
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/arbos/arbostypes"
	"github.com/offchainlabs/nitro/arbutil"
	"github.com/offchainlabs/nitro/broadcaster"
	"github.com/offchainlabs/nitro/wsbroadcastserver"
)

func Fuzz_BroadcastFeedMessage_Hash(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var m *broadcaster.BroadcastFeedMessage
		var chainId uint64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&m, &chainId)
		if m == nil {
			return
		}

		m.Hash(chainId)
	})
}

func Fuzz_Broadcaster_BroadcastFeedMessages(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		var messages []*broadcaster.BroadcastFeedMessage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &messages)
		if b == nil {
			return
		}

		b.BroadcastFeedMessages(messages)
	})
}

func Fuzz_Broadcaster_BroadcastSingle(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		var msg arbostypes.MessageWithMetadata
		var seq arbutil.MessageIndex
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &msg, &seq)
		if b == nil {
			return
		}

		b.BroadcastSingle(msg, seq)
	})
}

func Fuzz_Broadcaster_BroadcastSingleFeedMessage(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		var bfm *broadcaster.BroadcastFeedMessage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &bfm)
		if b == nil || bfm == nil {
			return
		}

		b.BroadcastSingleFeedMessage(bfm)
	})
}

func Fuzz_Broadcaster_ClientCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.ClientCount()
	})
}

func Fuzz_Broadcaster_Confirm(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		var seq arbutil.MessageIndex
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &seq)
		if b == nil {
			return
		}

		b.Confirm(seq)
	})
}

func Fuzz_Broadcaster_GetCachedMessageCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.GetCachedMessageCount()
	})
}

func Fuzz_Broadcaster_Initialize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.Initialize()
	})
}

func Fuzz_Broadcaster_ListenerAddr(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.ListenerAddr()
	})
}

func Fuzz_Broadcaster_NewBroadcastFeedMessage(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		var message arbostypes.MessageWithMetadata
		var sequenceNumber arbutil.MessageIndex
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &message, &sequenceNumber)
		if b == nil {
			return
		}

		b.NewBroadcastFeedMessage(message, sequenceNumber)
	})
}

func Fuzz_Broadcaster_Start(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &ctx)
		if b == nil {
			return
		}

		b.Start(ctx)
	})
}

// skipping Fuzz_Broadcaster_StartWithHeader because parameters include func, chan, or unsupported interface: github.com/gobwas/ws.HandshakeHeader

func Fuzz_Broadcaster_Started(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.Started()
	})
}

func Fuzz_Broadcaster_StopAndWait(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.Broadcaster
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.StopAndWait()
	})
}

func Fuzz_SequenceNumberCatchupBuffer_GetMessageCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.SequenceNumberCatchupBuffer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b)
		if b == nil {
			return
		}

		b.GetMessageCount()
	})
}

// skipping Fuzz_SequenceNumberCatchupBuffer_OnDoBroadcast because parameters include func, chan, or unsupported interface: interface{}

func Fuzz_SequenceNumberCatchupBuffer_OnRegisterClient(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var b *broadcaster.SequenceNumberCatchupBuffer
		var clientConnection *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&b, &clientConnection)
		if b == nil || clientConnection == nil {
			return
		}

		b.OnRegisterClient(clientConnection)
	})
}

// skipping Fuzz_NewBroadcaster because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/wsbroadcastserver.BroadcasterConfigFetcher

// skipping Fuzz_NewSequenceNumberCatchupBuffer because parameters include func, chan, or unsupported interface: func() bool
