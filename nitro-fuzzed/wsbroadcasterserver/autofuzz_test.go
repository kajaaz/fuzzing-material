package arbcompressfuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./wsbroadcastserver/".

import (
	"context"
	"net"
	"testing"
	"time"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/wsbroadcastserver"
	"github.com/spf13/pflag"
)

func Fuzz_BroadcasterConfig_Validate(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var bc *wsbroadcastserver.BroadcasterConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&bc)
		if bc == nil {
			return
		}

		bc.Validate()
	})
}

func Fuzz_ClientConnection_Age(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc)
		if cc == nil {
			return
		}

		cc.Age()
	})
}

func Fuzz_ClientConnection_Compression(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc)
		if cc == nil {
			return
		}

		cc.Compression()
	})
}

func Fuzz_ClientConnection_GetLastHeard(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc)
		if cc == nil {
			return
		}

		cc.GetLastHeard()
	})
}

func Fuzz_ClientConnection_Ping(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc)
		if cc == nil {
			return
		}

		cc.Ping()
	})
}

func Fuzz_ClientConnection_Receive(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		var ctx context.Context
		var timeout time.Duration
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc, &ctx, &timeout)
		if cc == nil {
			return
		}

		cc.Receive(ctx, timeout)
	})
}

func Fuzz_ClientConnection_RequestedSeqNum(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc)
		if cc == nil {
			return
		}

		cc.RequestedSeqNum()
	})
}

func Fuzz_ClientConnection_Start(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		var parentCtx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc, &parentCtx)
		if cc == nil {
			return
		}

		cc.Start(parentCtx)
	})
}

func Fuzz_ClientConnection_StopOnly(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cc *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cc)
		if cc == nil {
			return
		}

		cc.StopOnly()
	})
}

// skipping Fuzz_ClientConnection_Write because parameters include func, chan, or unsupported interface: interface{}

// skipping Fuzz_ClientManager_Broadcast because parameters include func, chan, or unsupported interface: interface{}

func Fuzz_ClientManager_ClientCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cm *wsbroadcastserver.ClientManager
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cm)
		if cm == nil {
			return
		}

		cm.ClientCount()
	})
}

// skipping Fuzz_ClientManager_Register because parameters include func, chan, or unsupported interface: net.Conn

func Fuzz_ClientManager_Remove(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cm *wsbroadcastserver.ClientManager
		var clientConnection *wsbroadcastserver.ClientConnection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cm, &clientConnection)
		if cm == nil || clientConnection == nil {
			return
		}

		cm.Remove(clientConnection)
	})
}

func Fuzz_ClientManager_Start(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cm *wsbroadcastserver.ClientManager
		var parentCtx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cm, &parentCtx)
		if cm == nil {
			return
		}

		cm.Start(parentCtx)
	})
}

func Fuzz_ConnectionLimiter_IsAllowed(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var l *wsbroadcastserver.ConnectionLimiter
		var ip net.IP
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&l, &ip)
		if l == nil {
			return
		}

		l.IsAllowed(ip)
	})
}

func Fuzz_ConnectionLimiter_Register(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var l *wsbroadcastserver.ConnectionLimiter
		var ip net.IP
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&l, &ip)
		if l == nil {
			return
		}

		l.Register(ip)
	})
}

func Fuzz_ConnectionLimiter_Release(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var l *wsbroadcastserver.ConnectionLimiter
		var ip net.IP
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&l, &ip)
		if l == nil {
			return
		}

		l.Release(ip)
	})
}

// skipping Fuzz_WSBroadcastServer_Broadcast because parameters include func, chan, or unsupported interface: interface{}

func Fuzz_WSBroadcastServer_ClientCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *wsbroadcastserver.WSBroadcastServer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.ClientCount()
	})
}

func Fuzz_WSBroadcastServer_Initialize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *wsbroadcastserver.WSBroadcastServer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.Initialize()
	})
}

func Fuzz_WSBroadcastServer_ListenerAddr(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *wsbroadcastserver.WSBroadcastServer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.ListenerAddr()
	})
}

func Fuzz_WSBroadcastServer_Start(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *wsbroadcastserver.WSBroadcastServer
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &ctx)
		if s == nil {
			return
		}

		s.Start(ctx)
	})
}

// skipping Fuzz_WSBroadcastServer_StartWithHeader because parameters include func, chan, or unsupported interface: github.com/gobwas/ws.HandshakeHeader

func Fuzz_WSBroadcastServer_Started(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *wsbroadcastserver.WSBroadcastServer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.Started()
	})
}

func Fuzz_WSBroadcastServer_StopAndWait(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *wsbroadcastserver.WSBroadcastServer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		s.StopAndWait()
	})
}

func Fuzz_BroadcasterConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		wsbroadcastserver.BroadcasterConfigAddOptions(prefix, f2)
	})
}

func Fuzz_ConnectionLimiterConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		wsbroadcastserver.ConnectionLimiterConfigAddOptions(prefix, f2)
	})
}

// skipping Fuzz_NewClientConnection because parameters include func, chan, or unsupported interface: net.Conn

// skipping Fuzz_NewClientManager because parameters include func, chan, or unsupported interface: github.com/mailru/easygo/netpoll.Poller

// skipping Fuzz_NewConnectionLimiter because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/wsbroadcastserver.ConnectionLimiterConfigFetcher

// skipping Fuzz_NewWSBroadcastServer because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/wsbroadcastserver.BroadcasterConfigFetcher

// skipping Fuzz_ReadData because parameters include func, chan, or unsupported interface: net.Conn
