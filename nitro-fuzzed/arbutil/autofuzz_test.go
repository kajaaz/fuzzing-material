package arbcompressfuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./arbutil/".

import (
	"testing"

	"github.com/ethereum/go-ethereum/core/types"
	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/arbutil"
)

func Fuzz_BlockNumberToMessageCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, blockNumber uint64, genesisBlockNumber uint64) {
		arbutil.BlockNumberToMessageCount(blockNumber, genesisBlockNumber)
	})
}

// skipping Fuzz_CorrespondingL1BlockNumber because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/arbutil.L1Interface

// skipping Fuzz_DetailTxError because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/arbutil.L1Interface

// skipping Fuzz_GetLogEmitterTxData because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/arbutil.L1Interface

// skipping Fuzz_GetPendingCallBlockNumber because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/arbutil.L1Interface

func Fuzz_MessageCountToBlockNumber(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var messageCount arbutil.MessageIndex
		var genesisBlockNumber uint64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&messageCount, &genesisBlockNumber)

		arbutil.MessageCountToBlockNumber(messageCount, genesisBlockNumber)
	})
}

func Fuzz_ParentHeaderToL1BlockNumber(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var header *types.Header
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&header)
		if header == nil {
			return
		}

		arbutil.ParentHeaderToL1BlockNumber(header)
	})
}

// skipping Fuzz_SendTxAsCall because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/arbutil.L1Interface

func Fuzz_SignedBlockNumberToMessageCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, blockNumber int64, genesisBlockNumber uint64) {
		arbutil.SignedBlockNumberToMessageCount(blockNumber, genesisBlockNumber)
	})
}
