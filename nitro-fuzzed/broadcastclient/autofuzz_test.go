package arbcompressfuzz

// Edit if desired. Code generated by "go-fuzz-fill-utils ./broadcastclient".

import (
	"context"
	"testing"

	"github.com/infosecual/go-fuzz-fill-utils/fuzzer"
	"github.com/offchainlabs/nitro/broadcastclient"
	"github.com/spf13/pflag"
)

func Fuzz_BroadcastClient_GetRetryCount(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var bc *broadcastclient.BroadcastClient
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&bc)
		if bc == nil {
			return
		}

		bc.GetRetryCount()
	})
}

func Fuzz_BroadcastClient_Start(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var bc *broadcastclient.BroadcastClient
		var ctxIn context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&bc, &ctxIn)
		if bc == nil {
			return
		}

		bc.Start(ctxIn)
	})
}

func Fuzz_BroadcastClient_StopAndWait(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var bc *broadcastclient.BroadcastClient
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&bc)
		if bc == nil {
			return
		}

		bc.StopAndWait()
	})
}

func Fuzz_Config_Enable(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *broadcastclient.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Enable()
	})
}

func Fuzz_FeedConfig_Validate(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var fc *broadcastclient.FeedConfig
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&fc)
		if fc == nil {
			return
		}

		fc.Validate()
	})
}

func Fuzz_ConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2)
		if f2 == nil {
			return
		}

		broadcastclient.ConfigAddOptions(prefix, f2)
	})
}

func Fuzz_FeedConfigAddOptions(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var prefix string
		var f2 *pflag.FlagSet
		var feedInputEnable bool
		var feedOutputEnable bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&prefix, &f2, &feedInputEnable, &feedOutputEnable)
		if f2 == nil {
			return
		}

		broadcastclient.FeedConfigAddOptions(prefix, f2, feedInputEnable, feedOutputEnable)
	})
}

// skipping Fuzz_NewBroadcastClient because parameters include func, chan, or unsupported interface: github.com/offchainlabs/nitro/broadcastclient.ConfigFetcher
